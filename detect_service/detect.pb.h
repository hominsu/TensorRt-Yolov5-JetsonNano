// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_detect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_detect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_detect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_detect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_detect_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_detect_2eproto_metadata_getter(int index);
namespace Detect {
class BoxRect;
struct BoxRectDefaultTypeInternal;
extern BoxRectDefaultTypeInternal _BoxRect_default_instance_;
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
}  // namespace Detect
PROTOBUF_NAMESPACE_OPEN
template<> ::Detect::BoxRect* Arena::CreateMaybeMessage<::Detect::BoxRect>(Arena*);
template<> ::Detect::DetectRequest* Arena::CreateMaybeMessage<::Detect::DetectRequest>(Arena*);
template<> ::Detect::DetectResponse* Arena::CreateMaybeMessage<::Detect::DetectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Detect {

// ===================================================================

class BoxRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detect.BoxRect) */ {
 public:
  inline BoxRect() : BoxRect(nullptr) {}
  virtual ~BoxRect();
  explicit constexpr BoxRect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxRect(const BoxRect& from);
  BoxRect(BoxRect&& from) noexcept
    : BoxRect() {
    *this = ::std::move(from);
  }

  inline BoxRect& operator=(const BoxRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxRect& operator=(BoxRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoxRect& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxRect* internal_default_instance() {
    return reinterpret_cast<const BoxRect*>(
               &_BoxRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoxRect& a, BoxRect& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxRect* New() const final {
    return CreateMaybeMessage<BoxRect>(nullptr);
  }

  BoxRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxRect& from);
  void MergeFrom(const BoxRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detect.BoxRect";
  }
  protected:
  explicit BoxRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_detect_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kAreaFieldNumber = 5,
    kClassIdFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double width = 3;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 4;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double area = 5;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // int64 class_id = 6;
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::int64 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Detect.BoxRect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double width_;
  double height_;
  double area_;
  ::PROTOBUF_NAMESPACE_ID::int64 class_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// -------------------------------------------------------------------

class DetectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detect.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  virtual ~DetectRequest();
  explicit constexpr DetectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectRequest* New() const final {
    return CreateMaybeMessage<DetectRequest>(nullptr);
  }

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRequest& from);
  void MergeFrom(const DetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detect.DetectRequest";
  }
  protected:
  explicit DetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_detect_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Detect.DetectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detect.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  virtual ~DetectResponse();
  explicit constexpr DetectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectResponse* New() const final {
    return CreateMaybeMessage<DetectResponse>(nullptr);
  }

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectResponse& from);
  void MergeFrom(const DetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detect.DetectResponse";
  }
  protected:
  explicit DetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_detect_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectFieldNumber = 2,
    kImageFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .Detect.BoxRect rect = 2;
  int rect_size() const;
  private:
  int _internal_rect_size() const;
  public:
  void clear_rect();
  ::Detect::BoxRect* mutable_rect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detect::BoxRect >*
      mutable_rect();
  private:
  const ::Detect::BoxRect& _internal_rect(int index) const;
  ::Detect::BoxRect* _internal_add_rect();
  public:
  const ::Detect::BoxRect& rect(int index) const;
  ::Detect::BoxRect* add_rect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detect::BoxRect >&
      rect() const;

  // bytes image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Detect.DetectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detect::BoxRect > rect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxRect

// double x = 1;
inline void BoxRect::clear_x() {
  x_ = 0;
}
inline double BoxRect::_internal_x() const {
  return x_;
}
inline double BoxRect::x() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.x)
  return _internal_x();
}
inline void BoxRect::_internal_set_x(double value) {
  
  x_ = value;
}
inline void BoxRect::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.x)
}

// double y = 2;
inline void BoxRect::clear_y() {
  y_ = 0;
}
inline double BoxRect::_internal_y() const {
  return y_;
}
inline double BoxRect::y() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.y)
  return _internal_y();
}
inline void BoxRect::_internal_set_y(double value) {
  
  y_ = value;
}
inline void BoxRect::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.y)
}

// double width = 3;
inline void BoxRect::clear_width() {
  width_ = 0;
}
inline double BoxRect::_internal_width() const {
  return width_;
}
inline double BoxRect::width() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.width)
  return _internal_width();
}
inline void BoxRect::_internal_set_width(double value) {
  
  width_ = value;
}
inline void BoxRect::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.width)
}

// double height = 4;
inline void BoxRect::clear_height() {
  height_ = 0;
}
inline double BoxRect::_internal_height() const {
  return height_;
}
inline double BoxRect::height() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.height)
  return _internal_height();
}
inline void BoxRect::_internal_set_height(double value) {
  
  height_ = value;
}
inline void BoxRect::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.height)
}

// double area = 5;
inline void BoxRect::clear_area() {
  area_ = 0;
}
inline double BoxRect::_internal_area() const {
  return area_;
}
inline double BoxRect::area() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.area)
  return _internal_area();
}
inline void BoxRect::_internal_set_area(double value) {
  
  area_ = value;
}
inline void BoxRect::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.area)
}

// int64 class_id = 6;
inline void BoxRect::clear_class_id() {
  class_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BoxRect::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BoxRect::class_id() const {
  // @@protoc_insertion_point(field_get:Detect.BoxRect.class_id)
  return _internal_class_id();
}
inline void BoxRect::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  class_id_ = value;
}
inline void BoxRect::set_class_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:Detect.BoxRect.class_id)
}

// -------------------------------------------------------------------

// DetectRequest

// bool status = 1;
inline void DetectRequest::clear_status() {
  status_ = false;
}
inline bool DetectRequest::_internal_status() const {
  return status_;
}
inline bool DetectRequest::status() const {
  // @@protoc_insertion_point(field_get:Detect.DetectRequest.status)
  return _internal_status();
}
inline void DetectRequest::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DetectRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Detect.DetectRequest.status)
}

// -------------------------------------------------------------------

// DetectResponse

// bool status = 1;
inline void DetectResponse::clear_status() {
  status_ = false;
}
inline bool DetectResponse::_internal_status() const {
  return status_;
}
inline bool DetectResponse::status() const {
  // @@protoc_insertion_point(field_get:Detect.DetectResponse.status)
  return _internal_status();
}
inline void DetectResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DetectResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Detect.DetectResponse.status)
}

// repeated .Detect.BoxRect rect = 2;
inline int DetectResponse::_internal_rect_size() const {
  return rect_.size();
}
inline int DetectResponse::rect_size() const {
  return _internal_rect_size();
}
inline void DetectResponse::clear_rect() {
  rect_.Clear();
}
inline ::Detect::BoxRect* DetectResponse::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:Detect.DetectResponse.rect)
  return rect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detect::BoxRect >*
DetectResponse::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:Detect.DetectResponse.rect)
  return &rect_;
}
inline const ::Detect::BoxRect& DetectResponse::_internal_rect(int index) const {
  return rect_.Get(index);
}
inline const ::Detect::BoxRect& DetectResponse::rect(int index) const {
  // @@protoc_insertion_point(field_get:Detect.DetectResponse.rect)
  return _internal_rect(index);
}
inline ::Detect::BoxRect* DetectResponse::_internal_add_rect() {
  return rect_.Add();
}
inline ::Detect::BoxRect* DetectResponse::add_rect() {
  // @@protoc_insertion_point(field_add:Detect.DetectResponse.rect)
  return _internal_add_rect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Detect::BoxRect >&
DetectResponse::rect() const {
  // @@protoc_insertion_point(field_list:Detect.DetectResponse.rect)
  return rect_;
}

// bytes image = 3;
inline void DetectResponse::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& DetectResponse::image() const {
  // @@protoc_insertion_point(field_get:Detect.DetectResponse.image)
  return _internal_image();
}
inline void DetectResponse::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:Detect.DetectResponse.image)
}
inline std::string* DetectResponse::mutable_image() {
  // @@protoc_insertion_point(field_mutable:Detect.DetectResponse.image)
  return _internal_mutable_image();
}
inline const std::string& DetectResponse::_internal_image() const {
  return image_.Get();
}
inline void DetectResponse::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetectResponse::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Detect.DetectResponse.image)
}
inline void DetectResponse::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Detect.DetectResponse.image)
}
inline void DetectResponse::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Detect.DetectResponse.image)
}
inline std::string* DetectResponse::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetectResponse::release_image() {
  // @@protoc_insertion_point(field_release:Detect.DetectResponse.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectResponse::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Detect.DetectResponse.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Detect

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_detect_2eproto
